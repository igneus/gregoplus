import json
from json import JSONDecodeError


class Gabc:
    """ knows how to build gabc from a Score """

    def __init__(self, score):
        self._score = score
        try:
            self._json = json.loads(self._score.gabc)
        except JSONDecodeError:
            raise ValueError('Value of the Chant.gabc property must be a valid JSON')


    def __str__(self):
        # TODO: load and print chant sources

        return \
            self.header + \
            "%%\n" + \
            self.gabc_with_verses

    @property
    def header(self):
        """
        gabc header
        """
        header = []
        header.append("name: " + self._score.incipit)

        if self._score.office_part:
            header.append("office-part: " + self._score.get_office_part_display())

        fields = [
            'mode',
            'transcriber',
            'commentary',
        ]
        for field_name in fields:
            field_value = getattr(self._score, field_name)
            if field_value:
                header.append(field_name + ": " + field_value)

        delim = ";\n"
        return delim.join(header) + delim

    @property
    def gabc(self):
        """
        gabc code as entered by the transcriber, without header fields
        generated by the system.
        """
        if isinstance(self._json, str):
            return self._json
        elif isinstance(self._json, list):
            try:
                return next(filter(lambda x: x[0] == 'gabc', self._json))[1]
            except StopIteration:
                raise ValueError('The JSON array variant of Chant.gabc value must contain at least one item of type "gabc"')
        else:
            raise ValueError('Unsupported JSON value type')

    @property
    def gabc_with_verses(self):
        verses = ''
        if self._score.gabc_verses:
            verses = "\n" + self._score.gabc_verses
        return self.gabc + verses

    @property
    def has_additional_content(self):
        return isinstance(self._json, list)
